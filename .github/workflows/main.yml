# 
# .github/workflows/main.yml
# بناء مشروع React (esbuild) ونشره إلى GitHub Pages مع اكتشاف تلقائي لمجلد المشروع الذي يحوي package.json.
# يصلح لمشاريع في الجذر أو داخل مجلد فرعي.
#
name: Build and Deploy (Pages)

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# نتأكد أن عمليات النشر لا تتداخل
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # سحب الشيفرة
      - name: Checkout
        uses: actions/checkout@v4

      # اكتشاف مجلد المشروع الذي يحوي package.json وتخزينه في WORKING_DIR
      - name: Detect project directory
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            echo "WORKING_DIR=." >> "$GITHUB_ENV"
            echo "Detected project directory at repo root (.)"
            exit 0
          fi
          CANDIDATE="$(find . -path './.git' -prune -o -path './node_modules' -prune -o -type f -name 'package.json' -print | head -n 1 || true)"
          if [ -z "$CANDIDATE" ]; then
            echo "No package.json found in repository. Ensure your project is committed." >&2
            exit 1
          fi
          DIR="$(dirname "$CANDIDATE")"
          echo "WORKING_DIR=$DIR" >> "$GITHUB_ENV"
          echo "Detected project directory at $DIR"

      # تهيئة Node مع كاش npm إذا وُجد package-lock أو shrinkwrap في WORKING_DIR
      - name: Setup Node (cache npm)
        if: ${{ hashFiles(format('{0}/package-lock.json', env.WORKING_DIR)) != '' || hashFiles(format('{0}/npm-shrinkwrap.json', env.WORKING_DIR)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            ${{ env.WORKING_DIR }}/package-lock.json
            ${{ env.WORKING_DIR }}/npm-shrinkwrap.json

      # تهيئة Node مع كاش yarn إذا وُجد yarn.lock في WORKING_DIR
      - name: Setup Node (cache yarn)
        if: ${{ hashFiles(format('{0}/yarn.lock', env.WORKING_DIR)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      # تهيئة Node بدون كاش إذا لم يوجد أي Lockfile في WORKING_DIR
      - name: Setup Node (no cache)
        if: ${{ hashFiles(format('{0}/package-lock.json', env.WORKING_DIR)) == '' && hashFiles(format('{0}/npm-shrinkwrap.json', env.WORKING_DIR)) == '' && hashFiles(format('{0}/yarn.lock', env.WORKING_DIR)) == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # تثبيت الاعتمادات داخل WORKING_DIR (يدعم npm أو yarn تلقائياً)
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ -f package-lock.json ]; then
            echo "Found package-lock.json → running npm ci"
            npm ci
          elif [ -f npm-shrinkwrap.json ]; then
            echo "Found npm-shrinkwrap.json → running npm ci"
            npm ci
          elif [ -f yarn.lock ]; then
            echo "Found yarn.lock → running yarn install --frozen-lockfile"
            corepack enable
            yarn install --frozen-lockfile
          else
            echo "No lockfile found → running npm install"
            npm install --no-audit --no-fund
          fi

      # البناء داخل WORKING_DIR
      - name: Build
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ -f yarn.lock ]; then
            yarn build
          else
            npm run build
          fi

      # رفع مخرجات البناء كقطعة للنشر (dist داخل WORKING_DIR)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.WORKING_DIR }}/dist

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # نشر صفحات GitHub
      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4
